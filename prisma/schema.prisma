generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  email            String           @unique(map: "email") @db.VarChar(255)
  password         String           @db.VarChar(255)
  createdAt        DateTime         @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt        DateTime         @default(now()) @updatedAt @map("updated_at") @db.DateTime(6)
  searches         Search[]
  PreferFacilities PreferFacility[]

  @@map("user")
}

model Search {
  id             Int             @id @default(autoincrement())
  userId         Int             @map("user_id")
  user           User?           @relation(fields: [userId], references: [id])
  createdAt      DateTime        @default(now()) @map("created_at") @db.DateTime(6)
  searchStations SearchStation[]

  @@map("search")
}

model SearchStation {
  id        Int            @id @default(autoincrement())
  searchId  Int            @map("search_id")
  search    Search?        @relation(fields: [searchId], references: [id])
  stationId Int            @map("station_id")
  station   SubwayStation? @relation(fields: [stationId], references: [id])

  @@map("search_station")
}

model SubwayStation {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @unique(map: "name") @db.VarChar(255)
  latitude                Float                   @db.Float
  longitude               Float                   @db.Float
  searchStations          SearchStation[]
  subwayStationFacilities SubwayStationFacility[]
  lines                   Line[]

  @@map("subway_station")
}

model PreferFacility {
  id         Int       @id @default(autoincrement())
  userId     Int       @map("user_id")
  user       User?     @relation(fields: [userId], references: [id])
  facilityId Int       @map("facility_id")
  facility   Facility? @relation(fields: [facilityId], references: [id])

  @@map("prefer_facility")
}

model Facility {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @unique(map: "name") @db.VarChar(255)
  status                  Boolean                 @default(true)
  updatedAt               DateTime                @default(now()) @updatedAt @map("updated_at") @db.DateTime(6)
  preferFacilities        PreferFacility[]
  subwayStationFacilities SubwayStationFacility[]

  @@map("facility")
}

model SubwayStationFacility {
  id              Int            @id @default(autoincrement())
  subwayStationId Int            @map("subway_station_id")
  subwayStation   SubwayStation? @relation(fields: [subwayStationId], references: [id])
  facilityId      Int            @map("facility_id")
  facility        Facility?      @relation(fields: [facilityId], references: [id])

  @@map("subway_station_facility")
}

model Line {
  id              Int           @id @default(autoincrement())
  name            String        @unique @db.VarChar(255)
  subwayStationId Int           @map("subway_station_id")
  subwayStation   SubwayStation @relation(fields: [subwayStationId], references: [id])

  @@map("line")
}
